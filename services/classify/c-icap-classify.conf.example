##srv_classify may be used to classify text and images. It does not do access
#     control but adds
##headers which can be used for access control.

# Sets the temp directory which we may use to store temporary text files
srv_classify.TmpDir /var/tmp/c_icap
# Sets the lowest level which will be considered ambiguous for text
#     classifications instead of nearest
srv_classify.TextAmbiguous -2
#Sets the lowest level which will be considered solid for text classifications
#    instead of ambiguous
srv_classify.TextSolidMatch 2.3
# Sets the text file types to be classified
srv_classify.TextFileTypes TEXT
# Sets the image file types to be classified
srv_classify.ImageFileTypes PNG GIF JPEG BMP ICO
# Sets whether the classify module allows 204 responses
srv_classify.Allow204Responces on
# The Maximum object to be classified.
srv_classify.MaxObjectSize 40M
# Number of cascades to load per image cateogry
# This is process local, so each process will have this number to use.
# Default: 10
# Note: -1 means ThreadsPerChild, which is the maximum
srv_classify.ImageCategoryCopies 50
# Add Image Categories, X_CIRCLE_COLOR is optional and used if debugSaveMarked or
#     debugDemonstrateMarked is activated
srv_classify.ImageCategory CATEGORY_NAME FILE RED_CIRCLE_COLOR BLUE_CIRCLE_COLOR GREEN_CIRCLE_COLOR
# Coalesce detected objects if objects overlap by a givern percentage
# (.5 is 50%, 1 is 100%)
srv_classify.ImageCoalesceOverlap CATEGORY_NAME PERCENT_OVERLAP

# Save the Original image
# srv_classify.debugSaveOriginal 1
# Save the detected parts
srv_classify.debugSaveParts 1
# Save the original image with detected parts marked
# srv_classify.debugSaveMarked 1
# Demonstrate the detection by returning the marked image from above
srv_classify.debugDemonstrate 1
# Demonstrate the detection by returning a mask with the objects circled
#     (but not visible)
# srv_classify.debugDemonstrateMasked 1
# Type of interpolation to use for images. NN (fastest), LINEAR (default), AREA,
#     BICUBIC (slowest).
srv_classify.ImageInterpolation LINEAR
# Maximum Scaling factor for images
# Default: 4
srv_classify.ImageMaxScale 4
# If an image has an x or y dimension larger than this value, it is scaled by
#     a factor that makes its maximum dimension fit this value (scaling factor
#     can never be larger than ImageMaxScale)
# Default: 240
srv_classify.ImageScaleDimension 240

# Type of interpolation to use for video. FAST (fastest), LINEAR (lowest
#     recommended), AREA (default), BICUBIC (slowest).
srv_classify.VideoInterpolation AREA
# Maximum Scaling factor for images
# Default: 4
srv_classify.VideoMaxScale 4
# If an video has an x or y dimension larger than this value, it is scaled by
#     a factor that makes its maximum dimension fit this value (scaling factor
#     can never be larger than VideoMaxScale)
# Default: 320
srv_classify.VideoScaleDimension 320
# Video is slow to process, so we only process a certain number per second
# Default: 3
srv_classify.VideoProcessFramesPerSecond 3

# Add text categories.
# srv_classify.TextHashSeeds Sets the key for the hash seed. It acts as
#     copyprotection and other functions. IT IS SHARED BETWEEN FHS/FNB!
srv_classify.TextHashSeeds PARTA_HEX_32BITS PARTB_HEX_32BITS
srv_classify.TextPreload PRELOAD_FILE_FULLPATH
# The following adds a text category (do multiple for multipe categories...
#     2 categories needed to be sane). May handle FHS (Fast HyperSpace) or
#     FNB (Fast NaiveBayes) files
srv_classify.TextCategory CATEGORY_NAME FILE_FULL_PATH
# OR, you can load a full directory of FHS or FNB files, depending on which of
#     the following you use, with the CATEGORY_NAME being the file name minus
#     the suffix (.fnb/.fhs)
AddTextCategoryDirectoryHS FHS_DIRECTORY_PATH
AddTextCategoryDirectoryNB FNB_DIRECTORY_PATH
# If you are using FNB, you will want to have this after you load all of your
#     data files
srv_classify.OptimizeFNB

# If you need to add secondary categories (where two text categories are similar
# enough that training cannot work if they are not treated separately, such as
# adult.affairs (dating sites focusing on "hooking up" or having sex) and
# social.dating (normal dataing sites), then use the following:
# srv_classify.TextPrimarySecondary PRIMARY_CATEGORY_REGEX
#     SECONDARY_CATEGORY_REGEX OPTIONALY_BIDIRECTIONAL_BINARY_TRUE_FALSE
# PRIMARY_CATEGORY_REGEX is any valid REG_EXTENDED | REG_ICASE tre regular
#     expression which represents the primary category to be matched
#     This should be quoted (").
# SECONDARY_CATEGORY_REGEX is any valid REG_EXTENDED | REG_ICASE tre regular
#     expression which represents the secondary category to be matched
#     This should be quoted (").
# OPTIONALY_BIDIRECTIONAL_BINARY_TRUE_FALSE does not have to be present, if it
#     is 0, then things are only compared PRIMARY THEN SECONDARY
#     If it is present and a 1, then PRIMARY THEN SECONDARY, and then SECONDARY
#     THEN PRIMARY are compared.
#     Do NOT set this to 1 if PRIMARY AND SECONDARY will include each other,
#     such as adult.* and adult.* as it wastes CPU cycles
srv_classify.TextPrimarySecondary "adult.affairs" "social.dating" 1

# Some text formats must be converted externally before C-ICAP Classify
# can classify them. This is done using one of the following:
# srv_classify.ExternalTextFileType (STDOUT|FILE) FILE_TYPE PROGRAM ARG1 ARG2 ARG3 ...
# srv_classify.ExternalTextMimeType (STDOUT|FILE) MIME_TYPE PROGRAM ARG1 ARG2 ARG3 ...
# srv_classify.ExternalImageFileType FILE_TYPE PROGRAM ARG1 ARG2 ARG3 ...
# srv_classify.ExternalImageMimeType MIME_TYPE PROGRAM ARG1 ARG2 ARG3 ...
# NOTE: ExternalTextMimeType is not supported currently
# STDOUT means that the program will output to STDOUT
# FILE means that you need to place %CLOUT as one of the args following
#     the appropriate argument for the program in question, %CLOUT defines
#     the file name where the program should place the output!
# With either option, you need to place %CLIN (a variable holding the file to be
#      converted) appropriately as one of the arguments.
# NOTE NOTE NOTE: Any such program MUST output UTF-8
# NOTE: Only one conversion should be provided for any given format for text conversion.
# NOTE: The FileTypes listed here should not appear in srv_classify.TextFileTypes
srv_classify.ExternalTextFileType STDOUT PDF /usr/bin/pdftotext %CLIN -
srv_classify.ExternalTextFileType FILE PDF /usr/bin/pdftotext %CLIN %CLOUT
# To process SWF files for text, you can use http://www.swftools.org/
srv_classify.ExternalImageFileType SWF /full/path/to/swfstrings %CLIN

# Some image formats must be converted externally before C-ICAP Classify
# can classify them. This is done using one of the following:
# srv_classify.ExternalImageFileType FILE_TYPE PROGRAM ARG1 ARG2 ARG3 ...
# srv_classify.ExternalImageMimeType MIME_TYPE PROGRAM ARG1 ARG2 ARG3 ...
# NOTE: ExternalImageMimeType is not supported currently
# You need to place %CLIN (a variable holding the file to be
#      converted) appropriately as one of the arguments. %CLDIROUT needs
#      to be placed appropriately as the directory where the images will be written.
# NOTE NOTE NOTE: Images must be exported with the appropriate types AND extensions.
#      Supported types/extensions: .png .jpg .ppm. It is wise that images should use
#      loss-less compression or not compressed on output from conversion, if possible.
# NOTE: Only one conversion should be provided for any given format for image conversion.
# NOTE: The FileTypes listed here should not appear in srv_classify.ImageFileTypes
# With all image extraction techniques, it may be wise to write wrapper scripts which will run
#    fdupes %CLDIROUT -N -d to clean up duplicates.
srv_classify.ExternalImageFileType PDF /usr/bin/pdfimages %CLIN %CLDIROUT
# To process SWF files for images, you will need to use swftools or the ilk,
#    but you will need to write a wrapper around SWFExtract
#    (to get IDs to then use -j and -p to extract)

# It is often useful to not write the text or images to be classified out to
# disk if they are under a certain size. This parameter sets that size.
# This can be absolute values or in K for Kilobytes, and M for Megabytes.
# Default: 32K
srv_classify.MaxMemClassification 32K

# srv_classify.MaxMemClassification can cause DoS possibilites. This paramter
# will help avoid them. This parameter is how much memory can be used for ALL
# objects done in memory because of MaxMemClassificaion. This parameter is NOT
# exact. Real memory usage can be 4x, or more, what you set here. This is due
# to certain optimizations in C-ICAP that are used.
# NOTE: This is per process, not thread or global.
# NOTE: This will cause a performance hit due to locking issues. Leave this at
# default, unless you see DoS problems.
# Default: 0
srv_classify.MaxTotalMemClassification 0

# Currently implemented but undocumented:
# MaxWindowSize, ImageMinProcess
